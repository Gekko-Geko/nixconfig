#!/bin/bash

# Prints all batteries, their percentage remaining and an emoji corresponding
# to charge status (üîå for plugged up, üîã for discharging on battery, etc.).

case $BLOCK_BUTTON in
	3) notify-send "üîã Battery module" "üîã: discharging
ÔâÄ : not charging
‚ôª: stagnant charge
Ó¨≠: charging
‚ö°: charged
‚ùó: battery very low!
- Scroll to change adjust xbacklight." ;;
esac

# Loop through all attached batteries and format the info
for battery in /sys/class/power_supply/BAT?*; do
	# If non-first battery, print a space separator.
	[ -n "${capacity+x}" ] && printf " "
	# Sets up the status and capacity
	case "$(cat "$battery/status" 2>&1)" in
		"Full") status="‚ö°" ;;
		"Discharging") status="ÔâÄ " ;;
		"Charging") status="Ó¨≠" ;;
		"Not charging") status="" ;;
		"Unknown") status="‚ôªÔ∏è" ;;
		*) exit 1 ;;
	esac
	capacity="$(cat "$battery/capacity" 2>&1)"
	# Will make a warn variable if discharging and low
	[ "$status" = "üîã" ] && [ "$capacity" -le 20 ] && warn="‚ùó"
	# Prints the info
	printf "%s%s%d%%" "$status" "$warn" "$capacity"; unset warn
done && printf "\\n"

if [ $(cat /sys/class/power_supply/BAT1/status) == "Charging" ] && [ $(cat /sys/class/power_supply/BAT1/capacity) -gt "95" ]; then
	notify-send "Battery status" "Battery full"
elif [ $(cat /sys/class/power_supply/BAT1/status) != "Charging" ] && [ $(cat /sys/class/power_supply/BAT1/capacity) -eq "20" ]; then
	notify-send "Battery status" "Battery low"
elif [ $(cat /sys/class/power_supply/BAT1/status) != "Charging" ] && [ $(cat /sys/class/power_supply/BAT1/capacity) -eq "15" ]; then
	notify-send "Battery status" "Battery low"
elif [ $(cat /sys/class/power_supply/BAT1/status) != "Charging" ] && [ $(cat /sys/class/power_supply/BAT1/capacity) -eq "13" ]; then
	notify-send "Battery status" "Battery low"
elif [ $(cat /sys/class/power_supply/BAT1/status) != "Charging" ] && [ $(cat /sys/class/power_supply/BAT1/capacity) -eq "10" ]; then
	notify-send "Battery status" "Battery low"
fi
